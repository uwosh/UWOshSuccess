<html xmlns="http://www.w3.org/1999/xhtml"
      xml:lang="en"
      lang="en"
      xmlns:tal="http://xml.zope.org/namespaces/tal"
      xmlns:metal="http://xml.zope.org/namespaces/metal"
      xmlns:i18n="http://xml.zope.org/namespaces/i18n"
      metal:use-macro="here/main_template/macros/master"
      i18n:domain="plone">

  <head><title></title></head>

  <metal:javascript_head fill-slot="javascript_head_slot">
    <tal:block define="macro here/archetypes_custom_js/macros/javascript_head | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
    <tal:comment replace="nothing">
      Many of the following defines duplicated from the tal:defines in the
      main slot. With base_edit, edit_macros could be reused as it was defined
      for the entire document. base_view uses main_template and thus must
      create additional defines for each slot it fills.
    </tal:comment>
    <tal:js define="fields python:here.Schema().viewableFields(here);
                    js python:here.getUniqueWidgetAttr(fields, 'helper_js')"
            condition="js"
            repeat="item js">
      <script type="text/javascript"
              charset="iso-8859-1"
              tal:condition="python:exists('portal/%s' % item)"
              tal:attributes="src string:$portal_url/$item">
      </script>
    </tal:js>
    <tal:block define="portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                       view_template python:'%s_view' % portal_type;
                       view_macros python:path('here/%s/macros|nothing' % view_template);
                       macro view_macros/js | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:javascript_head>

  <metal:css fill-slot="css_slot">
    <tal:comment replace="nothing">
      Many of the following defines duplicated from the tal:defines in the
      main slot. With base_edit, edit_macros could be reused as it was defined
      for the entire document. base_view uses main_template and thus must
      create additional defines for each slot it fills.
    </tal:comment>
    <tal:css define="fields python:here.Schema().viewableFields(here);
                     css python:here.getUniqueWidgetAttr(fields, 'helper_css')"
             condition="css"
             repeat="item css">
      <style type="text/css"
             media="all"
             tal:condition="python:exists('portal/%s' % item)"
             tal:content="structure string:<!-- @import url($portal_url/$item); -->">
      </style>
    </tal:css>
    <tal:block define="portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
                       view_template python:'%s_view' % portal_type;
                       view_macros python:path('here/%s/macros|nothing' % view_template);
                       macro view_macros/css | nothing"
               condition="macro">
      <metal:block use-macro="macro" />
    </tal:block>
  </metal:css>

  <body>
    <metal:fill fill-slot="main">
      <metal:main_macro define-macro="main"
            tal:define="portal_type python:here.getPortalTypeName().lower().replace(' ', '_');
            base_macros here/base/macros;
            view_template python:'%s_view' % portal_type;
            view_macros python:path('here/%s/macros|nothing' % view_template);
            header_macro view_macros/header | header_macro | base_macros/header;
            body_macro view_macros/body | body_macro | base_macros/body;
            folderlisting_macro view_macros/folderlisting | folderlisting | base_macros/folderlisting;
            footer_macro view_macros/footer | footer_macro | base_macros/footer;
            errors python:request.get('errors', {})">

        <metal:use_header use-macro="header_macro" />

      <div class="portalMessage"
	  tal:define="wtool python:here.portal_workflow;
	              getInfoFor python:wtool.getInfoFor;
	              review_state here/review_state|python: getInfoFor(context, 'review_state', '');">
	  <div tal:condition="python: review_state and review_state == 'private'">
	    FOR STUDENT: Your application is not submitted yet.  When you are finished filling it out, you must click the <em><b>Submit To Office</b></em> button, then wait for the Project Success office to approve your application.  You will receive an email when that has been done.
	  </div>
	  <div tal:condition="python: review_state and review_state == 'underReview'">
	    FOR OFFICE: If everything looks ok, click the <em><b>Approve Application</b></em> button.
	  </div>
	  <div tal:condition="python: review_state and review_state == 'accepted'">
	    FOR STUDENT: Your application has been accepted.  You may now use the Add BlueSheet tab above.
	  </div>
	</div> 

	<tal:block>
	<div id="UWOshOIEFunkyButtons">
	  <ul>
	    <li>
	    <a tal:condition="is_editable" 
	    tal:attributes="href python:context.absolute_url() + '/base_edit?last_referer=' + context.absolute_url()">
	    <center>Edit</center>
	    </a>
	    </li>

	    <tal:block repeat="transition transitions"
	        tal:define="url_for_action string:$here_url/content_status_modify;
	                    transitions python:context.portal_workflow.getTransitionsFor(context);">
	    <li tal:define="action_title transition/title;
	        action_id transition/id;
	        action_description transition/description"
	        tal:condition="python: action_id != 'addComment'">
	    <a tal:attributes="href python: url_for_action + '?workflow_action=' + action_id;">
	       <center tal:content="action_title">[Transition Title]</center>
	    </a>
	    </li>
	    </tal:block>
	  </ul>
	</div>
	</tal:block>

        <metal:use_body use-macro="body_macro" />
        <metal:use_body use-macro="folderlisting_macro" />
        <metal:use_footer use-macro="footer_macro" />

      </metal:main_macro>
    </metal:fill>
  </body>
</html>
